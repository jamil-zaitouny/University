     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 05                          a db 5
    15 00000001 FF00                        b dw 255
    16 00000003 07000000                    c dd 7
    17 00000007 0800000000000000            d dq 8
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ((a + b) + (a + c) + (b + c)) - d
    22 00000000 668B1D[01000000]                mov bx, [b]; bx = 5
    23 00000007 B500                            mov ch, 0;
    24 00000009 8A0D[00000000]                  mov cl, [a]
    25 0000000F 6601CB                          add bx, cx; bl = 5+6 :=> bx = 11
    26                                          
    27 00000012 A0[00000000]                    mov al, [a]
    28 00000017 B400                            mov ah, 0; ax = 6
    29 00000019 66BA0000                        mov dx, 0; dx:ax = 6
    30 0000001D 660305[03000000]                add ax, [c]; ax = 6 + 7 = 13
    31 00000024 660315[05000000]                add dx, [c+2];dx = dx + 0 :=> dx:ax = 13
    32 0000002B B900000000                      mov ecx, 0; ecx = 0
    33 00000030 6652                            push dx
    34 00000032 6650                            push ax
    35 00000034 59                              pop ecx; ecx = 13
    36 00000035 6601D9                          add cx, bx; adds low part of cx to bx :=> 
    37                                          
    38 00000038 A0[01000000]                    mov al, [b]
    39 0000003D B400                            mov ah, 0
    40 0000003F 66BA0000                        mov dx, 0
    41 00000043 660305[03000000]                add ax, [c]
    42 0000004A 660315[05000000]                add dx, [c+2]
    43 00000051 BB00000000                      mov ebx, 0
    44 00000056 6652                            push dx
    45 00000058 6650                            push ax
    46 0000005A 58                              pop eax
    47                                          
    48 0000005B 01C8                            add eax, ecx
    49 0000005D BA00000000                      mov edx, 0
    50                                          
    51 00000062 2B05[07000000]                  sub eax, [d]
    52 00000068 1B15[0B000000]                  sbb edx, [d+4]
    53                                      
    54                                          ; exit(0)
    55 0000006E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000070 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
